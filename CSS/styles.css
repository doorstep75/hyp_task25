@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;500;600;800&family=VT323&display=swap");

/* I imported a different font as I wanted to work with fonts of a different style.
Pretty much the body is quite standard other than the linear gradient that makes the 
website look a bit more stylish I felt */

body {
  margin: 20px;
  font-family: "Poppins";
  background: rgb(70, 230, 95);
  background: linear-gradient(
    230deg,
    rgba(70, 230, 95, 1) 0%,
    rgba(183, 249, 196, 0.8981793400954132) 50%,
    rgba(70, 230, 95, 1) 100%
  );
}

/* nav is made from flex to allow consistent spacing, removed underline that pops up in 
anchors and changed the font so it stood out at the top
The hover with a bit of delay makes for an interactive experience with the user */

nav {
  max-width: 99%;
  margin: 0 auto;

  display: flex;
  justify-content: space-evenly;
  align-items: center;

  position: fixed;
  top: 0;
  width: 100%;
  background: rgb(70, 230, 95);
  background: linear-gradient(
    230deg,
    rgba(70, 230, 95, 1) 0%,
    rgba(227, 227, 227, 0.8981793400954132) 75%,
    rgba(70, 230, 95, 1) 100%
  );
}

nav a {
  text-decoration: none;
  color: #333;
  font-size: 1.5em;
}

nav a:hover {
  color: white;
  transition: 0.4s;
}

/* This allowed me to control the nav logo size and keep away from html */

nav img {
  width: 150px;
  height: auto;
}

/* Styles for the burger menu button */
.burger-menu-btn {
  display: block;
  background-color: rgb(136, 225, 120);
}

/* Styles for the burger menu */
.burger-menu {
  display: none;
  position: absolute;
  /* Position directly below the button */
  top: calc(100% + 5px);
  /* Align with the left edge of the button and keep it away from social list*/
  left: 10%;
  background-color: rgb(136, 225, 120);
  border: 1px solid #193815;
}

/* Display burger menu items vertically */
.burger-menu a {
  display: block;
  padding: 5px 10px;
  text-decoration: none;
  color: #333;
}

/* Show burger menu when burger menu button is clicked, block shows the menu */
.burger-menu.show {
  display: block;
}

/* 
I'm leaving this in here as I tried the below to style my icons (rather than direct on html) but the icons all became different sizes and shapes
so lacked consistency.  Some were square, some round and slightly different in size so I couldn't see a tidier solution to anyone looking at
the site compared to the html page looking busier.  Plus they all became massively spaced out too rather than tightly packed like they are here

I added the class icon to each of the img elements in the socials grid.  Maybe I need to do something in nthchild 1 that controls this grid?

Same when I played with nth-child(1) and grid-container img (but I think I might need to target them better?)

.icon {
  object-fit: contain;
  width: 50px;
  height: 50px;
} */

/* Start of the grid container, with 1 fraction on the left, 2 larger on the upper 
but 3 slightly smaller on the lower */

.grid-container {
  max-width: 95%;

  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 20px;
  margin-top: 150px;

  justify-items: stretch;
  align-items: stretch;
}

/* text align on the divs so each grid gets centred as a standard */

.grid-container > div {
  text-align: center;
  padding: 20px;
  border-radius: 20px;
}

/* So that my DJ picture on the main page can be specifically targetted.  I had hoped to then 
use a class or id to target the social icons but ran out of time to look into these further */

/* The social icons needed spacing and running down rather than across so using
flex in this grid seemed a good fit 
I also use grid-column follwed by number to set starting column and spanning 1 fraction
I had to use grid row start to ensure it spanned across the first and second row */

.grid-container > div:nth-child(1) {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;

  border: solid #e3e3e3 1px;
  grid-column: 1 / span 1;
  grid-row-start: span 2;
  max-width: fit-content;
  padding: 10px 30px;
}

.grid-container > div:nth-child(2) {
  grid-column: 2 / span 3;
}

/* targetting my main picture and rounding each cornver with border radius */

.grid-container img {
  height: 22rem;
  border-radius: 30px;
}

/* the last of the big 2 columns on the upper grid, starting in column 5 and spanning 3 fractions/columns */

.grid-container > div:nth-child(3) {
  grid-column: 5 / span 3;
}

.grid-container > div:nth-child(4) {
  grid-row-start: 2;
  grid-column: 2 / span 2;
}

/* In theory I don't have to declare grid row start as 2 but seemed good practice so you can 
keep up with which is which.  Grids are smart and figure this out when spanned correctly */

.grid-container > div:nth-child(5) {
  grid-row-start: 2;
  grid-column: 4 / span 2;
}

.grid-container > div:nth-child(6) {
  grid-row-start: 2;
  grid-column: 6 / span 2;
}

/* This allowed me to target lists and remove bullet points */
.grid-container li {
  list-style-type: none;
}

/* Setting up the footer as its own flex box so I can control spacing 
You can also see where I set up different font sizes too */

footer {
  display: flex;
  justify-content: space-around;
  align-items: center;
  font-size: 0.8em;
  margin: 20px;
  color: rgb(11, 86, 11);
}

/* This is where I create the contact 'button' so it looks like a button with use of radius,
 it has spacing with padding and no to decoration to remove underline  */

#contact-button {
  background-color: #3dcf53;
  border: none;
  color: white;
  padding: 5px 10px;
  text-align: center;
  text-decoration: none;
  font-size: 20px;
  border-radius: 10px;
}

/* psuedo element to bring the button to life when you hover over it */

#contact-button:hover {
  transition: 0.4s;
  background-color: #31aa43;
  border: none;
  color: lightgray;
  padding: 10px 15px;
  text-align: center;
  text-decoration: none;
  font-size: 22px;
}

/* Just a simple and quick method to get a user back to the top, if the website was 
taller.  Also a bit of transition behaviour so the user knows it's interactive */

#top a {
  text-decoration: none;
  color: rgb(11, 86, 11);
}

#top a:hover {
  font-size: 18px;
  color: black;
  transition: 0.4s;
}
/* I wanted to add media query but I'll do that on the side when I have spare time */
